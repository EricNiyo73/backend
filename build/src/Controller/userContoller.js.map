{"version":3,"file":"userContoller.js","names":["_userModel","_interopRequireDefault","require","_bcrypt","_jsonwebtoken","obj","__esModule","default","createUser","req","res","salt","bcrypt","genSalt","hashedpassword","hash","body","password","existingEmail","User","findOne","email","emailRegex","test","status","json","message","newUser","firstname","lastname","save","then","result","data","user","catch","error","err","code","console","exports","login","validated","compare","token","jwt","sign","id","_id","process","env","JWT_SECRET","expiresIn","getAll","find","users","send","updateUser","userId","params","updatedUser","findByIdAndUpdate","$set","new","deleteUser","findById","findByIdAndDelete"],"sources":["../../../src/Controller/userContoller.js"],"sourcesContent":["import User from \"../model/userModel.js\";\r\nimport bcrypt from \"bcrypt\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\n\r\n\r\n// export const createUser =async(req, res) =>{\r\n//     try {\r\n//       const salt = await bcrypt.genSalt(10);\r\n//       const hashedpassword = await bcrypt.hash(req.body.password, salt);\r\n//             const existingEmail = await User.findOne({ email: req.body.email });\r\n//       // Email validation using a regular expression\r\n//       const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n//       if (!emailRegex.test(req.body.email)) {\r\n//         return res.status(400).json({\r\n//           message: 'Invalid email format'\r\n//         });\r\n//     }\r\n//       if (existingEmail) {\r\n//         return res.status(409).json({\r\n//           message: 'Email  already exists'\r\n//         });\r\n//     }\r\n//       const user = new User({\r\n//           firstname: req.body.firstname, \r\n//           lastname: req.body.lastname,  \r\n//           email: req.body.email, \r\n//           password: hashedpassword\r\n//       })\r\n//       await user.save()\r\n//       return res.status(201).json({\r\n//         status: 'success',\r\n//         message: 'User created Successfully',\r\n//         data: user\r\n//       })\r\n//     } catch (error) {\r\n//       return res.status(404).json({\r\n//         status: 'error',\r\n//         error: error.message\r\n//       })\r\n//     }\r\n//   }\r\nexport const createUser = async (req, res) => {\r\n    try {\r\n      const salt = await bcrypt.genSalt(10);\r\n      const hashedpassword = await bcrypt.hash(req.body.password, salt);\r\n  \r\n      const existingEmail = await User.findOne({ email: req.body.email });\r\n      // Email validation using a regular expression\r\n      const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n      if (!emailRegex.test(req.body.email)) {\r\n        return res.status(400).json({\r\n          message: 'Invalid email format'\r\n        });\r\n      }\r\n      if (existingEmail) {\r\n        return res.status(409).json({\r\n          message: 'Email  already exists'\r\n        });\r\n      } else {\r\n        // Create a user\r\n        const newUser = new User({\r\n          firstname: req.body.firstname, \r\n          lastname: req.body.lastname,  \r\n          email: req.body.email, \r\n          password: hashedpassword\r\n        });\r\n  \r\n        newUser.save()\r\n          .then(result => {\r\n            return res.status(200).json({\r\n              status: 'success',\r\n              data: {\r\n                user: newUser\r\n              }\r\n            });\r\n          })\r\n          .catch(error => {\r\n            return res.status(500).json({\r\n              error\r\n            });\r\n          });\r\n      }\r\n    } catch (err) {\r\n      if (err.code === 'Cannot set headers after they are sent to the client') {\r\n        console.error(err);\r\n        return res.status(500).json({\r\n          message: 'Unexpected error'\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  // ===============================LOGIN==================================\r\n\r\n  export const login = async (req, res) => {\r\n    try {\r\n      const user = await User.findOne({email: req.body.email});\r\n  \r\n      const validated = await bcrypt.compare(req.body.password, user.password);\r\n      if(!(user && validated)){\r\n        return res.status(201).json(\"Invalid Email or Username!\");\r\n      }\r\n      else {\r\n        const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n        return res.status(200).json({\r\n          message: \"Logged in successfully\",\r\n          token: token\r\n        });\r\n      }\r\n    }catch (err) {\r\n     return res.status(500).json(err);\r\n    }\r\n  };\r\n\r\n  // ===============================GETALL USERS=============================\r\n  export const getAll = (req, res) => {\r\n    User.find()\r\n    .then(users => {\r\n      return  res.send(users);\r\n    }).catch(err => {\r\n      return  res.status(500).send({\r\n            message: err.message || \"Some error occurred while retrieving user.\"\r\n        });\r\n    });\r\n  };\r\n \r\n  // ====================update==============================\r\n  export const updateUser = async (req, res) => {\r\n    if (req.body.userId === req.params.id) {\r\n      if (req.body.password) {\r\n        const salt = await bcrypt.genSalt(10);\r\n        req.body.password = await bcrypt.hash(req.body.password, salt);\r\n      }\r\n      try {\r\n        const updatedUser = await User.findByIdAndUpdate(\r\n          req.params.id,\r\n          {\r\n            $set: req.body,\r\n          },\r\n          { new: true }\r\n        );\r\n        return res.status(200).json(updatedUser);\r\n      } catch (err) {\r\n        res.status(500).json(err);\r\n      }\r\n    } else {\r\n      return res.status(401).json(\"You can update  your account only!\");\r\n    }\r\n  };\r\n\r\n  // ===================delete user================================\r\n\r\n  export  const deleteUser = async (req, res) => {\r\n    if (req.body.userId === req.params.id) {\r\n      try {\r\n        const user = await User.findById(req.params.id);\r\n        await User.findByIdAndDelete(req.params.id);\r\n         return res.status(200).json(\"User has been deleted...\");\r\n      } catch (err) {\r\n        return res.status(404).json(\"User not found!\");\r\n      }\r\n    } else {\r\n      return res.status(401).json(\"You can delete only your account!\");\r\n    }\r\n  };"],"mappings":";;;;;;AAAA,IAAAA,UAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,OAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,aAAA,GAAAH,sBAAA,CAAAC,OAAA;AAA+B,SAAAD,uBAAAI,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAI/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMG,UAAU,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EAC1C,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMC,eAAM,CAACC,OAAO,CAAC,EAAE,CAAC;IACrC,MAAMC,cAAc,GAAG,MAAMF,eAAM,CAACG,IAAI,CAACN,GAAG,CAACO,IAAI,CAACC,QAAQ,EAAEN,IAAI,CAAC;IAEjE,MAAMO,aAAa,GAAG,MAAMC,kBAAI,CAACC,OAAO,CAAC;MAAEC,KAAK,EAAEZ,GAAG,CAACO,IAAI,CAACK;IAAM,CAAC,CAAC;IACnE;IACA,MAAMC,UAAU,GAAG,kDAAkD;IACrE,IAAI,CAACA,UAAU,CAACC,IAAI,CAACd,GAAG,CAACO,IAAI,CAACK,KAAK,CAAC,EAAE;MACpC,OAAOX,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;IACA,IAAIR,aAAa,EAAE;MACjB,OAAOR,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA,MAAMC,OAAO,GAAG,IAAIR,kBAAI,CAAC;QACvBS,SAAS,EAAEnB,GAAG,CAACO,IAAI,CAACY,SAAS;QAC7BC,QAAQ,EAAEpB,GAAG,CAACO,IAAI,CAACa,QAAQ;QAC3BR,KAAK,EAAEZ,GAAG,CAACO,IAAI,CAACK,KAAK;QACrBJ,QAAQ,EAAEH;MACZ,CAAC,CAAC;MAEFa,OAAO,CAACG,IAAI,EAAE,CACXC,IAAI,CAACC,MAAM,IAAI;QACd,OAAOtB,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAC1BD,MAAM,EAAE,SAAS;UACjBS,IAAI,EAAE;YACJC,IAAI,EAAEP;UACR;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,CACDQ,KAAK,CAACC,KAAK,IAAI;QACd,OAAO1B,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAC1BW;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACN;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,IAAIA,GAAG,CAACC,IAAI,KAAK,sDAAsD,EAAE;MACvEC,OAAO,CAACH,KAAK,CAACC,GAAG,CAAC;MAClB,OAAO3B,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF;AACF,CAAC;;AAED;AAAAc,OAAA,CAAAhC,UAAA,GAAAA,UAAA;AAEO,MAAMiC,KAAK,GAAG,MAAAA,CAAOhC,GAAG,EAAEC,GAAG,KAAK;EACvC,IAAI;IACF,MAAMwB,IAAI,GAAG,MAAMf,kBAAI,CAACC,OAAO,CAAC;MAACC,KAAK,EAAEZ,GAAG,CAACO,IAAI,CAACK;IAAK,CAAC,CAAC;IAExD,MAAMqB,SAAS,GAAG,MAAM9B,eAAM,CAAC+B,OAAO,CAAClC,GAAG,CAACO,IAAI,CAACC,QAAQ,EAAEiB,IAAI,CAACjB,QAAQ,CAAC;IACxE,IAAG,EAAEiB,IAAI,IAAIQ,SAAS,CAAC,EAAC;MACtB,OAAOhC,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,4BAA4B,CAAC;IAC3D,CAAC,MACI;MACH,MAAMmB,KAAK,GAAGC,qBAAG,CAACC,IAAI,CAAC;QAAEC,EAAE,EAAEb,IAAI,CAACc;MAAI,CAAC,EAAEC,OAAO,CAACC,GAAG,CAACC,UAAU,EAAE;QAAEC,SAAS,EAAE;MAAK,CAAC,CAAC;MACrF,OAAO1C,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,wBAAwB;QACjCkB,KAAK,EAAEA;MACT,CAAC,CAAC;IACJ;EACF,CAAC,QAAOP,GAAG,EAAE;IACZ,OAAO3B,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACY,GAAG,CAAC;EACjC;AACF,CAAC;;AAED;AAAAG,OAAA,CAAAC,KAAA,GAAAA,KAAA;AACO,MAAMY,MAAM,GAAGA,CAAC5C,GAAG,EAAEC,GAAG,KAAK;EAClCS,kBAAI,CAACmC,IAAI,EAAE,CACVvB,IAAI,CAACwB,KAAK,IAAI;IACb,OAAQ7C,GAAG,CAAC8C,IAAI,CAACD,KAAK,CAAC;EACzB,CAAC,CAAC,CAACpB,KAAK,CAACE,GAAG,IAAI;IACd,OAAQ3B,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACgC,IAAI,CAAC;MACvB9B,OAAO,EAAEW,GAAG,CAACX,OAAO,IAAI;IAC5B,CAAC,CAAC;EACN,CAAC,CAAC;AACJ,CAAC;;AAED;AAAAc,OAAA,CAAAa,MAAA,GAAAA,MAAA;AACO,MAAMI,UAAU,GAAG,MAAAA,CAAOhD,GAAG,EAAEC,GAAG,KAAK;EAC5C,IAAID,GAAG,CAACO,IAAI,CAAC0C,MAAM,KAAKjD,GAAG,CAACkD,MAAM,CAACZ,EAAE,EAAE;IACrC,IAAItC,GAAG,CAACO,IAAI,CAACC,QAAQ,EAAE;MACrB,MAAMN,IAAI,GAAG,MAAMC,eAAM,CAACC,OAAO,CAAC,EAAE,CAAC;MACrCJ,GAAG,CAACO,IAAI,CAACC,QAAQ,GAAG,MAAML,eAAM,CAACG,IAAI,CAACN,GAAG,CAACO,IAAI,CAACC,QAAQ,EAAEN,IAAI,CAAC;IAChE;IACA,IAAI;MACF,MAAMiD,WAAW,GAAG,MAAMzC,kBAAI,CAAC0C,iBAAiB,CAC9CpD,GAAG,CAACkD,MAAM,CAACZ,EAAE,EACb;QACEe,IAAI,EAAErD,GAAG,CAACO;MACZ,CAAC,EACD;QAAE+C,GAAG,EAAE;MAAK,CAAC,CACd;MACD,OAAOrD,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACmC,WAAW,CAAC;IAC1C,CAAC,CAAC,OAAOvB,GAAG,EAAE;MACZ3B,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACY,GAAG,CAAC;IAC3B;EACF,CAAC,MAAM;IACL,OAAO3B,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,oCAAoC,CAAC;EACnE;AACF,CAAC;;AAED;AAAAe,OAAA,CAAAiB,UAAA,GAAAA,UAAA;AAEQ,MAAMO,UAAU,GAAG,MAAAA,CAAOvD,GAAG,EAAEC,GAAG,KAAK;EAC7C,IAAID,GAAG,CAACO,IAAI,CAAC0C,MAAM,KAAKjD,GAAG,CAACkD,MAAM,CAACZ,EAAE,EAAE;IACrC,IAAI;MACF,MAAMb,IAAI,GAAG,MAAMf,kBAAI,CAAC8C,QAAQ,CAACxD,GAAG,CAACkD,MAAM,CAACZ,EAAE,CAAC;MAC/C,MAAM5B,kBAAI,CAAC+C,iBAAiB,CAACzD,GAAG,CAACkD,MAAM,CAACZ,EAAE,CAAC;MAC1C,OAAOrC,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,0BAA0B,CAAC;IAC1D,CAAC,CAAC,OAAOY,GAAG,EAAE;MACZ,OAAO3B,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,iBAAiB,CAAC;IAChD;EACF,CAAC,MAAM;IACL,OAAOf,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,mCAAmC,CAAC;EAClE;AACF,CAAC;AAACe,OAAA,CAAAwB,UAAA,GAAAA,UAAA"}